CREATE TABLE IF NOT EXISTS users
(
    id    int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name  varchar(100) NOT NULL,
    email varchar(100) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS categories
(
    id   int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS events
(
    id                   int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title                varchar(120) NOT NULL,
    annotation           text         NOT NULL,
    description          text,
    state                varchar(20)  NOT NULL,
    creation_date        timestamp    NOT NULL,
    event_date           timestamp    NOT NULL,
    publication_date     timestamp,
    paid                 bool         NOT NULL,
    participant_limit    int4   DEFAULT 0,
    requested_moderation bool   DEFAULT true,
    latitude             float8 DEFAULT 0.0,
    longitude            float8 DEFAULT 0.0,
    category_id          int8 REFERENCES categories (id) ON DELETE RESTRICT,
    creator_id           int8         REFERENCES users (id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS participation_requests
(
    id             int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    creation_date  timestamp   NOT NULL,
    status         varchar(20) NOT NULL,
    event_id       int8 REFERENCES events (id) ON DELETE CASCADE,
    participant_id int8 REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS compilations
(
    id     int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title  varchar(100) NOT NULL,
    pinned bool DEFAULT false
);

CREATE TABLE IF NOT EXISTS events_compilations
(
    compilation_id int8 REFERENCES compilations (id) ON DELETE CASCADE,
    event_id       int8 REFERENCES events (id) ON DELETE CASCADE,
    CONSTRAINT pk_events_compilations PRIMARY KEY (compilation_id, event_id)
);

CREATE TABLE IF NOT EXISTS ratings
(
    id      int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created timestamp   NOT NULL,
    status  varchar(20) NOT NULL
);

CREATE TABLE IF NOT EXISTS user_ratings
(
    user_id   int8 REFERENCES users (id) ON DELETE CASCADE,
    rating_id int8 REFERENCES ratings (id) ON DELETE CASCADE,
    CONSTRAINT pk_user_ratings PRIMARY KEY (user_id, rating_id)
);

CREATE TABLE IF NOT EXISTS event_ratings
(
    event_id  int8 REFERENCES events (id) ON DELETE CASCADE,
    rating_id int8 REFERENCES ratings (id) ON DELETE CASCADE,
    CONSTRAINT pk_event_ratings PRIMARY KEY (event_id, rating_id)
);

DROP TYPE IF EXISTS rating_info CASCADE;

CREATE TYPE rating_info AS
(
    event_id      int8,
    like_count    int4,
    dislike_count int4,
    rating        float8
);

CREATE OR REPLACE FUNCTION get_rating_count_for_status(event int8, rating_status varchar(20))
    RETURNS int4
    LANGUAGE 'plpgsql' AS
'
    BEGIN
    RETURN (SELECT count(*)
            FROM event_ratings er
                     INNER JOIN ratings r ON er.rating_id = r.id
            WHERE r.status = rating_status
              AND er.event_id = event);
    END;
';

CREATE OR REPLACE function calculate_rating(like_count int4, dislike_count int4)
    RETURNS float8
    LANGUAGE 'plpgsql' AS
'
    DECLARE
        z_param float8 := 1.96; total_count int4 := like_count + dislike_count; phat float8;
    BEGIN IF total_count = 0
            THEN RETURN 0.0;
            ELSE
                phat = 1.0 * like_count / total_count;
                RETURN (phat + z_param ^ 2 / (2 * total_count) - z_param * |/((phat * (1 - phat) + z_param ^ 2 /
                        (4 * total_count)) / total_count)) / (1.0 + z_param ^ 2 / total_count); END IF;
    END;
';

CREATE OR REPLACE FUNCTION get_event_rating_info(event_id int8)
    RETURNS rating_info
    LANGUAGE 'plpgsql' AS
'
    DECLARE
        info rating_info;
        like_count int4;
        dislike_count int4;
    BEGIN
        IF EXISTS (SELECT * FROM events e WHERE e.id = event_id) THEN
            like_count = get_rating_count_for_status(event_id, ''LIKE'');
            dislike_count = get_rating_count_for_status(event_id, ''DISLIKE'');

            SELECT INTO info event_id, like_count, dislike_count,
                calculate_rating(like_count, dislike_count) AS rating;

        END IF;
        RETURN info;
    END;
';

CREATE OR REPLACE FUNCTION get_compilation_rating_info(compilation int8)
    RETURNS float8
    LANGUAGE 'plpgsql' AS
'
    DECLARE
        current_event int8;
        sum_rating float8 := 0.0;
        count float8 := 0.0;
    BEGIN
        FOR current_event IN SELECT e.id FROM events e INNER JOIN events_compilations ec ON ec.event_id = e.id
                             WHERE ec.compilation_id = compilation
        LOOP
            sum_rating = sum_rating + (get_event_rating_info(current_event)).rating;
            count = count + 1;
        END LOOP;

        IF (count <> 0) THEN
            RETURN sum_rating / count;
        ELSE
            RETURN 0.0;
        END IF;
    END;
';

CREATE OR REPLACE FUNCTION get_popular_events()
    RETURNS setof int8
    LANGUAGE 'plpgsql' AS
'
    BEGIN
        RETURN QUERY
            SELECT e.id FROM events e
            ORDER BY get_event_rating_info(e.id) DESC;
    END;
';

CREATE OR REPLACE FUNCTION get_popular_compilations()
    RETURNS setof int8
    LANGUAGE 'plpgsql' AS
'
    BEGIN
        RETURN QUERY
            SELECT c.id FROM compilations c
            ORDER BY get_compilation_rating_info(c.id) DESC;
    END;
';