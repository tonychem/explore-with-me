CREATE TABLE IF NOT EXISTS users
(
    id    int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name  varchar(100) NOT NULL,
    email varchar(100) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS categories
(
    id   int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS events
(
    id                   int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title                varchar(120) NOT NULL,
    annotation           text         NOT NULL,
    description          text,
    state                varchar(20)  NOT NULL,
    creation_date        timestamp    NOT NULL,
    event_date           timestamp    NOT NULL,
    publication_date     timestamp,
    paid                 bool         NOT NULL,
    participant_limit    int4   DEFAULT 0,
    requested_moderation bool   DEFAULT true,
    latitude             float8 DEFAULT 0.0,
    longitude            float8 DEFAULT 0.0,
    category_id          int8 REFERENCES categories (id) ON DELETE RESTRICT,
    creator_id           int8         REFERENCES users (id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS participation_requests
(
    id             int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    creation_date  timestamp   NOT NULL,
    status         varchar(20) NOT NULL,
    event_id       int8 REFERENCES events (id) ON DELETE CASCADE,
    participant_id int8 REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS compilations
(
    id     int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title  varchar(100) NOT NULL,
    pinned bool DEFAULT false
);

CREATE TABLE IF NOT EXISTS events_compilations
(
    compilation_id int8 REFERENCES compilations (id) ON DELETE CASCADE,
    event_id       int8 REFERENCES events (id) ON DELETE CASCADE,
    CONSTRAINT pk PRIMARY KEY (compilation_id, event_id)
);

CREATE TABLE IF NOT EXISTS ratings
(
    id       int8 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created  timestamp   NOT NULL,
    status   varchar(20) NOT NULL,
    user_id  int8 REFERENCES users (id) ON DELETE CASCADE,
    event_id int8 REFERENCES events (id) ON DELETE CASCADE,
    CONSTRAINT unique_user_event UNIQUE (user_id, event_id)
);

CREATE OR REPLACE VIEW event_likes AS
    SELECT r.event_id AS event_id, count(*) AS likes
    FROM ratings r
    WHERE r.status = 'LIKE'
    GROUP BY r.event_id;

CREATE OR REPLACE VIEW event_dislikes AS
    SELECT r.event_id AS event_id, count(*) AS dislikes
    FROM ratings r
    WHERE r.status = 'DISLIKE'
    GROUP BY r.event_id;

CREATE OR REPLACE function calculate_rating(like_count int4, dislike_count int4)
RETURNS float8 LANGUAGE 'plpgsql' AS '
DECLARE
    z_param float8 := 1.96;
    total_count int4 := like_count + dislike_count;
    phat float8 := 1.0 * like_count / total_count;
BEGIN
    RETURN (phat + z_param ^ 2 / (2 * total_count)
        - z_param * |/((phat * (1 - phat) + z_param ^ 2 / (4 * total_count)) / total_count))
        / (1.0 + z_param ^ 2 / total_count);
END;
';

CREATE OR REPLACE VIEW total_rating AS
    SELECT l.event_id, l.likes, d.dislikes, calculate_rating(l.likes, d.dislikes) as rating
    FROM event_likes AS l
    INNER JOIN event_dislikes d on l.event_id = d.event_id;