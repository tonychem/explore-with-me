{
	"info": {
		"_postman_id": "3d64d374-4942-45eb-b71d-5bf5d5ea114f",
		"name": "Rating events",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21178328"
	},
	"item": [
		{
			"name": "Поставить лайк",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"       \r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ на добавления лайка должен содержать поля: eventId, likeCount, dislikeCount\", function () {\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"pm.expect(target).to.have.property('likeCount');\r",
							"pm.expect(target).to.have.property('dislikeCount');\r",
							"});\r",
							"\r",
							"pm.test(\"При добавлении лайка должен отображатся новое значение лайков\", function () {\r",
							"    pm.expect(target.likeCount).equal(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"LIKE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поставить дизлайк",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"       \r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ на добавления дизлайка должен содержать поля: eventId, likeCount, dislikeCount\", function () {\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"pm.expect(target).to.have.property('likeCount');\r",
							"pm.expect(target).to.have.property('dislikeCount');\r",
							"});\r",
							"\r",
							"pm.test(\"При добавлении дизлайка должен отображатся новое значение дизлайков\", function () {\r",
							"    pm.expect(target.dislikeCount).equal(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"DISLIKE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить оценку с пустым телом запроса",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"       \r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить второй лайк тем же пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        ratingInfo = await api.addRating(user.id, event.id, rnd.getLike())\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"LIKE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить лайк и дизлайк одновременно",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        ratingLike = await api.addRating(user.id, event.id, rnd.getLike())\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"DISLIKE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение рейтинга с лайка на дизлайк",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        ratingLike = await api.addRating(user.id, event.id, rnd.getLike());\r",
							"\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ на изменения рейтинга должен содержать поля: eventId, likeCount, dislikeCount\", function () {\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"pm.expect(target).to.have.property('likeCount');\r",
							"pm.expect(target).to.have.property('dislikeCount');\r",
							"});\r",
							"\r",
							"pm.test(\"При изменении рейтинга с лайка на дизлайк должно отображатся новое значение дизлайков\", function () {\r",
							"    pm.expect(target.dislikeCount).equal(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"DISLIKE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение рейтинга с дизлайка на дизлайк",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        ratingLike = await api.addRating(user.id, event.id, rnd.getDislike());\r",
							"\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ на изменения рейтинга должен содержать поля: eventId, likeCount, dislikeCount\", function () {\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"pm.expect(target).to.have.property('likeCount');\r",
							"pm.expect(target).to.have.property('dislikeCount');\r",
							"});\r",
							"\r",
							"pm.test(\"При изменении рейтинга с дизлайка на дизлайк счетчик не должен изменится\", function () {\r",
							"    pm.expect(target.dislikeCount).equal(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"DISLIKE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление оценки",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        ratingLike = await api.addRating(user.id, event.id, rnd.getDislike());\r",
							"        foundRating = await api.findRating(user.id, event.id);\r",
							"\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        pm.collectionVariables.set(\"beforeDeletion\", foundRating);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const source = pm.collectionVariables.get(\"beforeDeletion\");\r",
							"\r",
							"pm.test(\"Рейтинг должен существовать до удаления\", function() {\r",
							"    pm.expect(source).not.to.be.undefined;\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);   \r",
							"});\r",
							"\r",
							"let body\r",
							"const req = {\r",
							"                url: \"http://localhost:8080/users/\" + pm.collectionVariables.get(\"uid\") + \"/rating/\" + pm.collectionVariables.get(\"eid\"),\r",
							"                method: \"GET\",\r",
							"                body: body == null ? \"\" : JSON.stringify(body),\r",
							"                header: { \"Content-Type\": \"application/json\" },\r",
							"            };\r",
							"pm.sendRequest(req, (error, response) => {\r",
							"    pm.test(\"Оценка должна быть удалена после выполнения запроса\", function(){\r",
							"        if (!response) {\r",
							"            throw new Error(\"После удаления еще существует запись!\")\r",
							"        }\r",
							"    });\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение полной информации об оценках события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const creator = await api.addUser(rnd.getUser());\r",
							"        const userLiker1 = await api.addUser(rnd.getUser());\r",
							"        const userLiker2 = await api.addUser(rnd.getUser());\r",
							"        const userDisliker = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(creator.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        ratingLike1 = await api.addRating(userLiker1.id, event.id, rnd.getLike());\r",
							"        ratingLike2 = await api.addRating(userLiker2.id, event.id, rnd.getLike());\r",
							"        ratingDislike = await api.addRating(userDisliker.id, event.id, rnd.getDislike());\r",
							"        \r",
							"        likeIdsArray = [userLiker1.id, userLiker2.id];\r",
							"        dislikeIdsArray = [userDisliker.id];\r",
							"\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        pm.collectionVariables.set(\"likes\", likeIdsArray);\r",
							"        pm.collectionVariables.set(\"dislikes\", dislikeIdsArray);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const sourceLikes = pm.collectionVariables.get(\"likes\");\r",
							"const sourceDislikes = pm.collectionVariables.get(\"dislikes\");\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Полная информация о рейтинге события должна содержать поля: eventId, userLikes, userDislikes\", function () {\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"pm.expect(target).to.have.property('userLikes');\r",
							"pm.expect(target).to.have.property('userDislikes');\r",
							"});\r",
							"\r",
							"pm.test(\"Должны выводить id пользователей, поставивших соответствующие оценки\", function () {\r",
							"    pm.expect(target.userLikes).includes(sourceLikes[0]);\r",
							"    pm.expect(target.userLikes).includes(sourceLikes[1]);\r",
							"    pm.expect(target.userDislikes).includes(sourceDislikes[0]);\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/rating/event/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rating",
						"event",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение статуса оценки события пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const creator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(creator.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        const liker = await api.addUser(rnd.getUser());\r",
							"\r",
							"        ratingLike = await api.addRating(liker.id, event.id, rnd.getLike());\r",
							"\r",
							"        pm.collectionVariables.set(\"uid\", liker.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ на запрос статуса должен содержать поле status\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Поле статус должно быть равно LIKE\", function () {\r",
							"    pm.expect(target.status).equal(\"LIKE\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение статуса оценки, если пользователь не оценивал событие",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const creator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(creator.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        const someUser = await api.addUser(rnd.getUser());\r",
							"\r",
							"        pm.collectionVariables.set(\"uid\", someUser.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и пустое тело\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.not.be.withBody;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/rating/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"rating",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение популярных событий",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const creator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let mostLikedEvent = await api.addEvent(creator.id, rnd.getEvent(category.id));\r",
							"        mostLikedEvent = await api.publishEvent(mostLikedEvent.id);\r",
							"\r",
							"        let averageLikedEvent = await api.addEvent(creator.id, rnd.getEvent(category.id));\r",
							"        averageLikedEvent = await api.publishEvent(averageLikedEvent.id);\r",
							"\r",
							"        let lessLikedEvent = await api.addEvent(creator.id, rnd.getEvent(category.id));\r",
							"        lessLikedEvent = await api.publishEvent(lessLikedEvent.id);\r",
							"       \r",
							"        const liker1 = await api.addUser(rnd.getUser());\r",
							"        const liker2 = await api.addUser(rnd.getUser());\r",
							"        const liker3 = await api.addUser(rnd.getUser());\r",
							"        const disliker1 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        await api.addRating(liker1.id, mostLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(liker2.id, mostLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(liker3.id, mostLikedEvent.id, rnd.getLike());\r",
							"\r",
							"        await api.addRating(liker1.id, averageLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(liker2.id, averageLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(liker3.id, averageLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(disliker1.id, averageLikedEvent.id, rnd.getDislike());\r",
							"\r",
							"        await api.addRating(liker1.id, lessLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(liker2.id, lessLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(disliker1.id, lessLikedEvent.id, rnd.getDislike());\r",
							"\r",
							"        pm.collectionVariables.set(\"mostLikedEventId\", mostLikedEvent.id);\r",
							"        pm.collectionVariables.set(\"averageLikedEventId\", averageLikedEvent.id);\r",
							"        pm.collectionVariables.set(\"lessLikedEventId\", lessLikedEvent.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен быть непустым массивом событий\", function () {\r",
							"    pm.expect(response).to.be.an('array');\r",
							"    pm.expect(response.length).to.be.gte(3);\r",
							"});\r",
							"\r",
							"pm.test(\"Элемент массива должен содержать краткую информацию о событии\", function () {\r",
							"    pm.expect(response[0]).to.contain.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate');\r",
							"});\r",
							"\r",
							"pm.test(\"События должны быть упорядочены по убыванию рейтинга\", function() {\r",
							"    const correctOrderOfIds = [pm.collectionVariables.get(\"mostLikedEventId\"), pm.collectionVariables.get(\"averageLikedEventId\"), pm.collectionVariables.get(\"lessLikedEventId\")];\r",
							"    const arrayOfIdsInResponse = [];\r",
							"\r",
							"    response.forEach(element => {\r",
							"        if (element.id == correctOrderOfIds[0] || element.id == correctOrderOfIds[1] || element.id == correctOrderOfIds[2]) {\r",
							"            arrayOfIdsInResponse.push(element.id);\r",
							"        }\r",
							"    });\r",
							"    pm.expect(arrayOfIdsInResponse).to.deep.equal(correctOrderOfIds);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/rating/event/popular?from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rating",
						"event",
						"popular"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение популярных подборок",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const creator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let mostLikedEvent = await api.addEvent(creator.id, rnd.getEvent(category.id));\r",
							"        mostLikedEvent = await api.publishEvent(mostLikedEvent.id);\r",
							"\r",
							"        let averageLikedEvent = await api.addEvent(creator.id, rnd.getEvent(category.id));\r",
							"        averageLikedEvent = await api.publishEvent(averageLikedEvent.id);\r",
							"\r",
							"        let lessLikedEvent = await api.addEvent(creator.id, rnd.getEvent(category.id));\r",
							"        lessLikedEvent = await api.publishEvent(lessLikedEvent.id);\r",
							"       \r",
							"        const liker1 = await api.addUser(rnd.getUser());\r",
							"        const liker2 = await api.addUser(rnd.getUser());\r",
							"        const liker3 = await api.addUser(rnd.getUser());\r",
							"        const disliker1 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        await api.addRating(liker1.id, mostLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(liker2.id, mostLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(liker3.id, mostLikedEvent.id, rnd.getLike());\r",
							"\r",
							"        await api.addRating(liker1.id, averageLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(liker2.id, averageLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(liker3.id, averageLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(disliker1.id, averageLikedEvent.id, rnd.getDislike());\r",
							"\r",
							"        await api.addRating(liker1.id, lessLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(liker2.id, lessLikedEvent.id, rnd.getLike());\r",
							"        await api.addRating(disliker1.id, lessLikedEvent.id, rnd.getDislike());\r",
							"\r",
							"        let mostLikedCompilation = rnd.getCompilation(mostLikedEvent.id, averageLikedEvent.id);\r",
							"        let lessLikedCompilation = rnd.getCompilation(averageLikedEvent.id, lessLikedEvent.id);\r",
							"\r",
							"        mostLikedCompilation = await api.addCompilation(mostLikedCompilation);\r",
							"        lessLikedCompilation = await api.addCompilation(lessLikedCompilation);\r",
							"\r",
							"        pm.collectionVariables.set(\"mostLikedCompilation\", mostLikedCompilation.id);\r",
							"        pm.collectionVariables.set(\"lessLikedCompilation\", lessLikedCompilation.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен быть непустым массивом событий\", function () {\r",
							"    pm.expect(response).to.be.an('array');\r",
							"    pm.expect(response.length).to.be.gte(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Элемент массива должен содержать краткую информацию о событии\", function () {\r",
							"    pm.expect(response[0]).to.contain.keys('id', 'title', 'pinned', 'events');\r",
							"});\r",
							"\r",
							"pm.test(\"Подборки событий должны быть упорядочены по убыванию рейтинга\", function() {\r",
							"    const correctOrderOfIds = [pm.collectionVariables.get(\"mostLikedCompilation\"), pm.collectionVariables.get(\"lessLikedCompilation\")];\r",
							"    const arrayOfIdsInResponse = [];\r",
							"\r",
							"    response.forEach(element => {\r",
							"        if (element.id == correctOrderOfIds[0] || element.id == correctOrderOfIds[1]) {\r",
							"            arrayOfIdsInResponse.push(element.id);\r",
							"        }\r",
							"    });\r",
							"    pm.expect(arrayOfIdsInResponse).to.deep.equal(correctOrderOfIds);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/rating/compilation/popular?from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rating",
						"compilation",
						"popular"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addRating(userId, eventId, rating, verbose=null) {",
					"        return this.post('/users/' + userId + '/rating/' + eventId, rating, \"Ошибка при оценке события\", verbose);",
					"    }",
					"",
					"    async updateRating(userId, eventId, rating, verbose=null) {",
					"        return this.patch('/' + userId + '/rating/' + eventId, rating, \"Ошибка при изменении оценки события\", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async findRating(userId, eventId, verbose=null) {",
					"        return this.get('/users/' + userId + '/rating/' + eventId, null, \"Ошибка получения оценки\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getLike() {",
					"        return {",
					"            status: 'LIKE'",
					"        }",
					"    }",
					"",
					"    getDislike() {",
					"        return {",
					"            status: 'DISLIKE'",
					"        }",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "eid",
			"value": ""
		},
		{
			"key": "event",
			"value": ""
		},
		{
			"key": "likes",
			"value": ""
		},
		{
			"key": "dislikes",
			"value": ""
		},
		{
			"key": "beforeDeletion",
			"value": ""
		},
		{
			"key": "mostLikedEventId",
			"value": ""
		},
		{
			"key": "averageLikedEventId",
			"value": ""
		},
		{
			"key": "lessLikedEventId",
			"value": ""
		},
		{
			"key": "mostLikedCompilation",
			"value": ""
		},
		{
			"key": "lessLikedCompilation",
			"value": ""
		}
	]
}